/*
 * Copyright 2011-2012 by Alexei Kaigorodov
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */
package org.df4j.nio2.net;

import java.io.IOException;
import java.net.SocketAddress;
import java.net.StandardSocketOptions;
import java.nio.ByteBuffer;
import java.nio.channels.AsynchronousCloseException;
import java.nio.channels.AsynchronousSocketChannel;
import java.nio.channels.CompletionHandler;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.df4j.core.*;
import org.df4j.core.Actor.StreamInput;
import org.df4j.pipeline.ReactiveActor;
import org.df4j.pipeline.ReactiveActor.ReactiveStreamOutput;

/**
 * Wrapper over {@link AsynchronousSocketChannel}.
 * Simplifies input-output, handling queues of I/O requests.
 * 
 * For client-side connections, instatntiate and call connect(addr).
 * For server-side connections, new instances are generated by
 * {@link AsyncServerSocketChannel}.
 *  
 * Internally, manages 2 input queues: one for reading requests and one for writing requests.
 * After request is served, it is sent to the port denoted by <code>replyTo</code>
 * property in the request.
 * 
 * IO requests can be posted immediately, but will be executed
 * only after connection completes.
 * If interested in the moment when connection is established,
 * add a listener to connEvent.
 */
public class AsyncSocketChannel {
	/** read requests queue */
	public final Reader reader = new Reader();
	/** write requests queue */
	public final Writer writer = new Writer();

    protected volatile AsynchronousSocketChannel channel;
    
    /** after closing, return itself to this port */
    protected BackPort<AsyncSocketChannel> backPort;
    
    protected final ConnectionCompleter connEvent=new ConnectionCompleter();
    
    /**
     * for client-side socket
     * Starts connection to a server. IO requests can be queued immediately,
     * but will be executed only after connection completes.
     * If interested in the moment when connection is established, add a
     * listener to the result of call to {@link getConnEvent}().
     * 
     * @throws IOException
     */
    public AsyncSocketChannel(SocketAddress addr) throws IOException {
        AsynchronousSocketChannel channel =	AsynchronousSocketChannel.open();
    	this.channel=channel;
        channel.connect(addr, null, connEvent);
    }
    
    /** for server-side connections
     * 
     * @param channel accepted connection
     * @param returnPort 
     */
    public AsyncSocketChannel(AsynchronousSocketChannel channel, BackPort<AsyncSocketChannel> returnPort) {
    	this.channel=channel;
    	this.backPort=returnPort;
        connEvent.completed(null, null);
    }
    
    public void setTcpNoDelay(boolean on) throws IOException {
        channel.setOption(StandardSocketOptions.TCP_NODELAY, on);
    }

    public Future<Void> getConnEvent() {
		return connEvent;
	}

    /** disallows subsequent posts of requests; already posted requests 
     * would be processed.
     * @throws IOException 
     */
    public synchronized void close() {
        AsynchronousSocketChannel locchannel;
        BackPort<AsyncSocketChannel> locreturnPort;
        synchronized (this) {
            locchannel = channel;
            channel=null;
            locreturnPort = backPort;
            backPort=null;
        }
    	if (locchannel!=null) {
            try {
                locchannel.close();
            } catch (IOException e) {
            }
    	}
        if (locreturnPort!=null) {
            locreturnPort.takeBack(this);
        }
    }

    public synchronized boolean isClosed() {
        return channel==null;
    }
    
    //===================== inner classes
    
    /**
     * callback for connection completion
     * works both in client-side and server-side modes
     */
    class ConnectionCompleter extends CompletableFuture<Void>
         implements CompletionHandler<Void, Void>
    {
        @Override
        public void completed(Void result, Void asc) {
            reader.resume();
            writer.resume();
            super.complete(null);
        }

        @Override
        public void failed(Throwable exc, Void channel) {
            super.completeExceptionally(exc);
        } 
    }
    
    public class Reader extends ReactiveActor implements CompletionHandler<Integer, ByteBuffer> {
        /** here output messages return */
        protected ReactiveStreamOutput<ByteBuffer> output=new ReactiveStreamOutput<>();
        protected Semafor channelAcc = new Semafor(); // channel accessible
        long timeout=0;

        public void resume() {
            channelAcc.up();
        }

        public void injectBuffers(int count, int bufLen) {
            for (int k=0; k<count; k++) {
            	ByteBuffer buf=ByteBuffer.allocate(bufLen);
            	output.post(buf);
            }
        }

		public void close() {
            AsyncSocketChannel.this.close();
		}

        //-------------------- start reading

		@Override
        protected void act() {
            if (isClosed()) {
                output.post(r);
                postFailure(new AsynchronousCloseException());
                return;
            }
            ByteBuffer buffer=output.get();
            buffer.clear();
            if (timeout>0) {
                channel.read(buffer, timeout, TimeUnit.MILLISECONDS, buffer, this);
            } else {
                channel.read(buffer, buffer, this);
            }
        }
        
        // ------------- reading finished

        public void completed(Integer result, ByteBuffer buffer) {
            if (result==-1) {
                output.close();
                AsyncSocketChannel.this.close();
            } else {
                buffer.flip();
                output.post(buffer);
                // start next reading only after this reading is posted,
                // to keep buffer ordering
                channelAcc.up();
            }
        }

        public void failed(Throwable exc, ByteBuffer attach) {
            if (exc instanceof AsynchronousCloseException) {
                AsyncSocketChannel.this.close();
            } else {
                channelAcc.up(); // let subsequent requests fail
                postFailure(exc);
            }
        }
    }
    
    class Writer extends ReactiveActor implements CompletionHandler<Integer, ByteBuffer> {
        protected ReactiveStreamInput<ByteBuffer> input=new ReactiveStreamInput<>();
        protected Semafor channelAcc = new Semafor(); // channel accessible
        long timeout=0;

        public void resume() {
            channelAcc.up();
        }

        public void post(ByteBuffer buffer) {
            if (isClosed()) {
                postFailure(new AsynchronousCloseException());
                return;
            }
            input.post(buffer);
        }

        //-------------------- start writing

        protected void writeBuf(ByteBuffer buffer) {
            if (isClosed()) {
                postFailure(new AsynchronousCloseException());
                return;
            }
            if (timeout>0) {
                channel.write(buffer, timeout, TimeUnit.MILLISECONDS, buffer, this);
            } else {
                channel.write(buffer, buffer, this);
            }
        }

        protected void act() {
            writeBuf(input.get());
        }

        @Override
        protected void complete() {
            AsyncSocketChannel.this.close();
        }

        @Override
        public void stop() {
            AsyncSocketChannel.this.close();
        }
        
        // ------------- writing finished

        @Override
        public void completed(Integer result, ByteBuffer buffer) {
            if (result==-1) {
                input.takeBack(buffer);
                AsyncSocketChannel.this.close();
            } else if (buffer.hasRemaining()) {
                // write remaining bytes
                writeBuf(buffer);
            } else {
                input.takeBack(buffer);
                channelAcc.up(); // process next buffer
            }
        }

        @Override
        public void failed(Throwable exc, ByteBuffer attach) {
            if (exc instanceof AsynchronousCloseException) {
                AsyncSocketChannel.this.close();
            } else {
                channelAcc.up(); // let subsequent requests fail
                postFailure(exc);
            }
        }
    }
}
